class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> v;
        int p=1;
        int k;
        int p2=1;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
           p=p*nums[i];
            if(nums[i]==0)
            {
                k=i;
            }
        }
     if(p!=0){
         for(int i=0;i<n;i++)
        {
            v.push_back(p/nums[i]);
        }
     }
    if(p==0)
        {
            for(int i=0;i<n;i++)
            {
                if(i!=k)
                {
                    p2=p2*nums[i];
                }
            }
             for(int i=0;i<n;i++)
            {
                if(i!=k)
                {
                    v.push_back(0);
                }
                else if(i==k)
                {
                 v.push_back(p2);   
                }
            }
            
        }
        
        return v;
        
    }
};

//time complexity=o(n)
//space complexity o(1)
